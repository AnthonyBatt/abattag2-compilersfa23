=====STUDENT TESTS=====
====Good Tests====
===[STUDENT TESTS/good0.bminor Input]===
f: function void () = 
{
	print ;

	a: array [1] array [1] array [1] integer = {{{1}}};

	a[0][0][0] = 2;

	c: char = '\0x74';
}

===[STUDENT TESTS/good0.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good0.bminor Output]===
f: function void () =
{
   print ;
   a: array [1] array [1] array [1] integer = {{1};
   a[0][0][0]=2;
   c: char = 't';
}




===[STUDENT TESTS/good1.bminor Input]===
/* Assign integer expression to local variable/ typechecking with function call. */

x: integer = 5;
y: integer = 10;

main: function void ()=
{
	x: integer = y * 10 + 15 - 4;
}
	


===[STUDENT TESTS/good1.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good1.bminor Output]===
x: integer = 5;
y: integer = 10;
main: function void () =
{
   x: integer = y*10+15-4;
}




===[STUDENT TESTS/good10.bminor Input]===
/* Test array of array assignments. */

x: array [5] integer = {1,2,3,4,5};
y: array [5] array [5] integer;

main: function void () =
{
	y[1] = x;
	count: integer;
	for(count = 0; count < 5; count++)
	{
		y[count] = x;
	} 	
}

===[STUDENT TESTS/good10.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good10.bminor Output]===
x: array [5] integer = {1,2,3,4,5};
y: array [5] array [5] integer;
main: function void () =
{
   y[1]=x;
   count: integer;
   for(count=0;count<5;count++)
   {
      y[count]=x;
   }
}




===[STUDENT TESTS/good11.bminor Input]===
/* A program is a sequence of declarations */
/* Try a variety of variable declarations. */

n: integer;
m: integer = 20;

b: boolean;
c: boolean = true;
s: string;
t: string = "hello\n";
d: char;
e: char = 'x';

x: array [] string;
y: array [] string = { "a", "b", "c" };
z: array [] array [] string = { {"a","b","c"}, {"x","y","z"} };

g: array [3] string;
h: array [3] string = { "a", "b", "c" };
i: array [2] array [3] string = { {"a","b","c"}, {"x","y","z"} };

===[STUDENT TESTS/good11.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good11.bminor Output]===
n: integer;
m: integer = 20;
b: boolean;
c: boolean = true;
s: string;
t: string = "hello\n";
d: char;
e: char = 'x';
x: array [] string;
y: array [] string = {"a","b","c"};
z: array [] array [] string = {{"a","b","c"},{"x","y","z"}};
g: array [3] string;
h: array [3] string = {"a","b","c"};
i: array [2] array [3] string = {{"a","b","c"},{"x","y","z"}};




===[STUDENT TESTS/good12.bminor Input]===
/* Function prototypes are declarations without bodies. */

ComputeAscii: function char ( c: char );

GetLength: function integer ( s: string, i: integer );

/* Function body has some code in it */

GetArea: function integer ( width: integer, height: integer ) =
{
	return width * height;
}

===[STUDENT TESTS/good12.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good12.bminor Output]===
ComputeAscii: function char (c: char);
GetLength: function integer (s: string, i: integer);
GetArea: function integer (width: integer, height: integer) =
{
   return width*height;
}




===[STUDENT TESTS/good13.bminor Input]===
/* A function contains a sequence of statements */
/* Some of those statements can be decls */

simplefunc: function void () = {
     x: integer;
     y: integer = 20;
     s: string = "hello world";
}

===[STUDENT TESTS/good13.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good13.bminor Output]===
simplefunc: function void () =
{
   x: integer;
   y: integer = 20;
   s: string = "hello world";
}




===[STUDENT TESTS/good14.bminor Input]===
/* A function contains a sequence of statements */
/* Try decls and stmts and exprs together. */

simplefunc: function boolean ( x: integer, y: integer ) = {

     // A declaration
     z: integer = x * y;

     // An expression with a semicolon
     z = 16 + x / y;

     // Print statement
     print "input is: ", x, " and ", y, "\n";

     // Simple if-else statement
     if( x < y ) {
         return true;
     } else {
         return false;
     }

}

===[STUDENT TESTS/good14.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good14.bminor Output]===
simplefunc: function boolean (x: integer, y: integer) =
{
   z: integer = x*y;
   z=16+x/y;
   print "input is: ",x," and ",y,"\n";
   if(x<y)
   {
      return true;
   }
   else
   {
      return false;
   }
}




===[STUDENT TESTS/good15.bminor Input]===
/* Try accesssing arrays of various sizes; */

a: array [10] integer = {100,200,300,400,500,600,700,800,900};
b: array [10] integer;
c: array [10] array [10] integer;

testfunc: function void () = {
    i: integer;
    j: integer;

    for(i=0;i<10;i++) {
        b[i] = a[i] * 10;
    }

    for(i=0;i<5;i++) {
        b[i*2] = a[i] + b[i];
    }

    for(j=0;j<10;i++) {
        for(i=0;i<10;i++) {
            c[i][j] = i*j;
        }
    }

    for(j=0;j<10;i++) {
        for(i=0;i<10;i++) {
            print c[i][j];
            print " ";
        }
        print "\n";
    }
}

===[STUDENT TESTS/good15.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good15.bminor Output]===
a: array [10] integer = {100,200,300,400,500,600,700,800,900};
b: array [10] integer;
c: array [10] array [10] integer;
testfunc: function void () =
{
   i: integer;
   j: integer;
   for(i=0;i<10;i++)
   {
      b[i]=a[i]*10;
   }
   for(i=0;i<5;i++)
   {
      b[i*2]=a[i]+b[i];
   }
   for(j=0;j<10;i++)
   {
      for(i=0;i<10;i++)
      {
         c[i][j]=i*j;
      }
   }
   for(j=0;j<10;i++)
   {
      for(i=0;i<10;i++)
      {
         print c[i][j];
         print " ";
      }
      print "\n";
   }
}




===[STUDENT TESTS/good16.bminor Input]===
/* Try several variations of for-loops */

simplefunc: function void (r: integer, s: integer, t: integer ) = {

    i: integer;

    for( i=0; i<r; i++ ) {
        print i,"\n";
    }

    i=0;
    for( ; i<s; i++ ) {
        print i,"\n";
    }

    i=0;
    for( ; i<r; ) {
        print i,"\n";
        i++;
    }

    for(;;) print "forever!\n";
}

===[STUDENT TESTS/good16.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good16.bminor Output]===
simplefunc: function void (r: integer, s: integer, t: integer) =
{
   i: integer;
   for(i=0;i<r;i++)
   {
      print i,"\n";
   }
   i=0;
   for(;i<s;i++)
   {
      print i,"\n";
   }
   i=0;
   for(;i<r;)
   {
      print i,"\n";
      i++;
   }
   for(;;)
   {
      print "forever!\n";
   }
}




===[STUDENT TESTS/good17.bminor Input]===
/* Test various nestings of if-else statements */

testit: function boolean ( x: integer, y: integer ) = {

	/* If statement without braces */
	if( x<y ) print "less\n"; else print "low\n";

	/* If statement with braces */
	if( x<y ) { print "less\n"; } else { print "low\n"; }

	/* This statement should print nothing */
        if(20<10) if(10<20) print "incorrect!"; else print "dangling else!";

	/* statements and decls inside of if-else */

        if( x>y ) {
              i: integer;
              for(i=0;i<x;i++) print i, "\n";
        } else {
              i: integer;
              for(i=0;i<y;i++) print i, "\n";
        }

	/* A decl can come after a few statements */
	i: integer;

	/* try the other way around */
	for(i=0;i<x;i++) {
              if( i<x ) print "small"; else print "large";
        }

        return true;
}

===[STUDENT TESTS/good17.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good17.bminor Output]===
testit: function boolean (x: integer, y: integer) =
{
   if(x<y)
   {
      print "less\n";
   }
   else
   {
      print "low\n";
   }
   if(x<y)
   {
      print "less\n";
   }
   else
   {
      print "low\n";
   }
   if(20<10)
   {
      if(10<20)
      {
         print "incorrect!";
      }
      else
      {
         print "dangling else!";
      }
   }
   if(x>y)
   {
      i: integer;
      for(i=0;i<x;i++)
      {
         print i,"\n";
      }
   }
   else
   {
      i: integer;
      for(i=0;i<y;i++)
      {
         print i,"\n";
      }
   }
   i: integer;
   for(i=0;i<x;i++)
   {
      if(i<x)
      {
         print "small";
      }
      else
      {
         print "large";
      }
   }
   return true;
}




===[STUDENT TESTS/good18.bminor Input]===
/* Now try some expressions */

x: integer = 65;
s: string = "hello";
b: boolean = false;

min: function integer ( a: integer, b: integer ) =
{
	if( a<b ) return a; else return b;
}

testfunc: function void ( z: integer ) =
{
	// Nested integer operators.
	y: integer = x*(x*10 + 55%6 + z/10);
	print "y: ", y, "\n";

	// Nested boolean operations.
	c: boolean = ( x<100 && y>200 ) || !(b=true);
	print "c: ", c, "\n";

	// Boolean operations on strings?
	d: boolean = (s == "goodbye");
	print "d: ", d, "\n";

	// Can we stack up assignments?
	z = y = x;

	a: array [100] integer;

	// Function calls and array accesses:
	y = min(a[10],a[20]);
}

===[STUDENT TESTS/good18.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good18.bminor Output]===
x: integer = 65;
s: string = "hello";
b: boolean = false;
min: function integer (a: integer, b: integer) =
{
   if(a<b)
   {
      return a;
   }
   else
   {
      return b;
   }
}
testfunc: function void (z: integer) =
{
   y: integer = x*(x*10+55%6+z/10);
   print "y: ",y,"\n";
   c: boolean = (x<100&&y>200)||!(b=true);
   print "c: ",c,"\n";
   d: boolean = (s=="goodbye");
   print "d: ",d,"\n";
   z=y=x;
   a: array [100] integer;
   y=min(a[10],a[20]);
}




===[STUDENT TESTS/good19.bminor Input]===
/* Check for minimum use of parentheses. */

testfunc: function void ( x: integer, y:integer, z:integer ) = {

          r: integer;
	  b: boolean;

          // Parens required
	  r = (x+y)/z;
	  r = x+(y+z);
	  b = (true||false) && (false||true);

          // Parens not required
	  r = x+(y/z);
	  r = (x+y)+z;
	  b = (x+y) < (x+z);
	  b = (true&&false) || (false&&true);

}

===[STUDENT TESTS/good19.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good19.bminor Output]===
testfunc: function void (x: integer, y: integer, z: integer) =
{
   r: integer;
   b: boolean;
   r=(x+y)/z;
   r=x+(y+z);
   b=(true||false)&&(false||true);
   r=x+(y/z);
   r=(x+y)+z;
   b=(x+y)<(x+z);
   b=(true&&false)||(false&&true);
}




===[STUDENT TESTS/good2.bminor Input]===
/* Assign an integer expression to local variable. */

x: integer = 5;
y: integer = 10;

test: function integer();

main: function void ()=
{
	x:integer = y * 10 + 15 - test();
}

test: function integer () =
{
	return 5;
}
	


===[STUDENT TESTS/good2.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good2.bminor Output]===
x: integer = 5;
y: integer = 10;
test: function integer ();
main: function void () =
{
   x: integer = y*10+15-test();
}
test: function integer () =
{
   return 5;
}




===[STUDENT TESTS/good3.bminor Input]===
/* Test name resolution at multiple scope levels. */

x: integer = 5;
y: integer = 10;

main: function void () =
{
	x: integer = 5;
	y: integer = 10;
	{
		x: integer = 5;
		y: integer = 10;
		{
			x: char = 'a';
			y: integer = 10;
		}
		y = x + y;
	}
}
	


===[STUDENT TESTS/good3.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good3.bminor Output]===
x: integer = 5;
y: integer = 10;
main: function void () =
{
   x: integer = 5;
   y: integer = 10;
   x: integer = 5;
   y: integer = 10;
   x: char = 'a';
   y=x+y;
}




===[STUDENT TESTS/good4.bminor Input]===
/* Use character types in various contexts. */

charFxn: function char(x: char)=
{
	if(x == 'a')
	{
		return 'z';
	}
}

main: function void ()=
{
	c: char;

	if('a' == charFxn('c'))
	{
		print "unreachable";
	}
	if('a' != 'a')
	{
		print "unreachable";
	}
	if(c == 'a')
	{
		print "unreachable";
	}
}


===[STUDENT TESTS/good4.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good4.bminor Output]===
charFxn: function char (x: char) =
{
   if(x=='a')
   {
      return 'z';
   }
}
main: function void () =
{
   c: char;
   if('a'==charFxn('c'))
   {
      print "unreachable";
   }
   if('a'!='a')
   {
      print "unreachable";
   }
   if(c=='a')
   {
      print "unreachable";
   }
}




===[STUDENT TESTS/good5.bminor Input]===
// Test integer comparisons and functions. */

intFxn: function integer(c:char);

glob: integer = 1;

main: function void ()=
{
	c: integer;
	if(6 == intFxn('c'))
	{
		print "unreachable";
	}
	if(5 >= 5)
	{
		print "unreachable";
	}
	if(c > 5)
	{
		print "unreachable";
	}
	if(c >= 5)
	{
		print "unreachable";
	}
	if(intFxn('a') <= 5)
	{
		print "reachable";
	}
	if(glob < 5)
	{
		print "reachable";
	}
}

intFxn: function integer(c: char)=
{
	if(c == 'a')
	{
		return 5;
	}
	return 0;
}


===[STUDENT TESTS/good5.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good5.bminor Output]===
intFxn: function integer (c: char);
glob: integer = 1;
main: function void () =
{
   c: integer;
   if(6==intFxn('c'))
   {
      print "unreachable";
   }
   if(5>=5)
   {
      print "unreachable";
   }
   if(c>5)
   {
      print "unreachable";
   }
   if(c>=5)
   {
      print "unreachable";
   }
   if(intFxn('a')<=5)
   {
      print "reachable";
   }
   if(glob<5)
   {
      print "reachable";
   }
}
intFxn: function integer (c: char) =
{
   if(c=='a')
   {
      return 5;
   }
   return 0;
}




===[STUDENT TESTS/good6.bminor Input]===
/* Test function declarations without prototypes. */

test1: function integer (a:integer, b:integer)=
{
	return a + b;
}

test2: function boolean (a:integer, b:integer)=
{
	return a < b;
}

test3: function char (a:integer)=
{
	if (a > 5) {
		return 'x';
	} else {
		return 'y';
	}
}

main:function void ()=
{
	print test1(10,20), test2(30,40), test3(10), "\n";
}


===[STUDENT TESTS/good6.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good6.bminor Output]===
test1: function integer (a: integer, b: integer) =
{
   return a+b;
}
test2: function boolean (a: integer, b: integer) =
{
   return a<b;
}
test3: function char (a: integer) =
{
   if(a>5)
   {
      return 'x';
   }
   else
   {
      return 'y';
   }
}
main: function void () =
{
   print test1(10,20),test2(30,40),test3(10),"\n";
}




===[STUDENT TESTS/good7.bminor Input]===
/* Test function invocations with prototypes. */

test1:function integer (a:integer, b:integer);
test2:function boolean (a:integer, b:integer);
test3:function string (a:integer);

main:function void ()=
{
	x:integer = test1(5, 6);
	test2(5, 6);
	print test3(7);
}

test1:function integer (a:integer, b:integer)=
{
	return a + b;
}

test2:function boolean (a:integer, b:integer)=
{
	return a==b;
}

test3:function string (a:integer)=
{
	if (test1(1, 5) > 6)
	{
		return "hello world";
	}
}

===[STUDENT TESTS/good7.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good7.bminor Output]===
test1: function integer (a: integer, b: integer);
test2: function boolean (a: integer, b: integer);
test3: function string (a: integer);
main: function void () =
{
   x: integer = test1(5,6);
   test2(5,6);
   print test3(7);
}
test1: function integer (a: integer, b: integer) =
{
   return a+b;
}
test2: function boolean (a: integer, b: integer) =
{
   return a==b;
}
test3: function string (a: integer) =
{
   if(test1(1,5)>6)
   {
      return "hello world";
   }
}




===[STUDENT TESTS/good8.bminor Input]===
/* Update one element of an array. */

x:array [5] integer = {1,2,3,4,5};

main:function void () =
{
	x[4] = 4;
}

===[STUDENT TESTS/good8.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good8.bminor Output]===
x: array [5] integer = {1,2,3,4,5};
main: function void () =
{
   x[4]=4;
}




===[STUDENT TESTS/good9.bminor Input]===
/* Update array with values from function calls. */

x: array [5] integer = {1,2,3,4,5};
intFxn: function integer ();

main: function void () =
{
	x[4] = intFxn();
	x[intFxn()] = 4;
	
}
intFxn: function integer () =
{
	return 3;
}

===[STUDENT TESTS/good9.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good9.bminor Output]===
x: array [5] integer = {1,2,3,4,5};
intFxn: function integer ();
main: function void () =
{
   x[4]=intFxn();
   x[intFxn()]=4;
}
intFxn: function integer () =
{
   return 3;
}




====Bad Tests====
=====HIDDEN TESTS=====
====Good Tests====
===[HIDDEN TESTS/good1.bminor Input]===
/* A program is a sequence of declarations */
/* Try a variety of variable declarations. */

n: integer;
m: integer = 20;

b: boolean;
c: boolean = false;
s: string;
t: string = "world\n";
d: char;
e: char = 'x';

f: float = 1.23;

x: array [] string;
y: array [] string = { "a", "b", "c" };
z: array [] array [] string = { {"a","b","c"}, {"x","y","z"} };

g: array [3] string;
h: array [3] string = { "a", "b", "c" };
i: array [2] array [3] string = { {"a","b","c"}, {"x","y","z"} };

===[HIDDEN TESTS/good1.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good1.bminor Output]===
n: integer;
m: integer = 20;
b: boolean;
c: boolean = false;
s: string;
t: string = "world\n";
d: char;
e: char = 'x';
f: float = 1.23;
x: array [] string;
y: array [] string = {"a","b","c"};
z: array [] array [] string = {{"a","b","c"},{"x","y","z"}};
g: array [3] string;
h: array [3] string = {"a","b","c"};
i: array [2] array [3] string = {{"a","b","c"},{"x","y","z"}};




===[HIDDEN TESTS/good10.bminor Input]===
/* Try accesssing arrays of various sizes; */

a: array [10] integer = {100,200,300,400,500,600,700,800,900};
b: array [10] integer;
c: array [10] array [10] integer;

testfunc: function void () = {
    i: integer;
    j: integer;

    for(i=0;i<10;i++) {
        b[i] = a[i] * 10;
    }

    for(i=0;i<5;i++) {
        b[i*2] = a[i] + b[i];
    }

    for(j=0;j<10;i++) {
        for(i=0;i<10;i++) {
            c[i][j] = i*j;
        }
    }

    for(j=0;j<10;i++) {
        for(i=0;i<10;i++) {
            print c[i][j];
            print " ";
        }
        print "\n";
    }
}

===[HIDDEN TESTS/good10.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good10.bminor Output]===
a: array [10] integer = {100,200,300,400,500,600,700,800,900};
b: array [10] integer;
c: array [10] array [10] integer;
testfunc: function void () =
{
   i: integer;
   j: integer;
   for(i=0;i<10;i++)
   {
      b[i]=a[i]*10;
   }
   for(i=0;i<5;i++)
   {
      b[i*2]=a[i]+b[i];
   }
   for(j=0;j<10;i++)
   {
      for(i=0;i<10;i++)
      {
         c[i][j]=i*j;
      }
   }
   for(j=0;j<10;i++)
   {
      for(i=0;i<10;i++)
      {
         print c[i][j];
         print " ";
      }
      print "\n";
   }
}




===[HIDDEN TESTS/good2.bminor Input]===
/* Function prototypes are declarations without bodies. */

ComputeAscii: function char ( c: char );

GetLength: function integer ( s: string, i: integer );

/* Function body has some code in it */

GetArea: function integer ( width: float, height: float ) =
{
	return width * height;
}

===[HIDDEN TESTS/good2.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good2.bminor Output]===
ComputeAscii: function char (c: char);
GetLength: function integer (s: string, i: integer);
GetArea: function integer (width: float, height: float) =
{
   return width*height;
}




===[HIDDEN TESTS/good3.bminor Input]===
/* A function contains a sequence of statements */
/* Some of those statements can be decls */

simplefunc: function void () = {
     x: integer;
     y: integer = 20;
     s: string = "hello world";
     f: float = 3.3e1;
}

===[HIDDEN TESTS/good3.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good3.bminor Output]===
simplefunc: function void () =
{
   x: integer;
   y: integer = 20;
   s: string = "hello world";
   f: float = 33;
}




===[HIDDEN TESTS/good4.bminor Input]===
/* A function contains a sequence of statements */
/* Try decls and stmts and exprs together. */

simplefunc: function boolean ( x: integer, y: integer ) = {

     // A declaration
     z: integer = x * y;

     // An expression with a semicolon
     z = 16 - x / y;

     r: integer = x + (y + z);

     // Print statement
     print "input is: ", x, " and ", y, "\n";

     // Simple if-else statement
     if( x <= y ) {
         return true;
     } else {
         return false;
     }

}

===[HIDDEN TESTS/good4.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good4.bminor Output]===
simplefunc: function boolean (x: integer, y: integer) =
{
   z: integer = x*y;
   z=16-x/y;
   r: integer = x+(y+z);
   print "input is: ",x," and ",y,"\n";
   if(x<=y)
   {
      return true;
   }
   else
   {
      return false;
   }
}




===[HIDDEN TESTS/good5.bminor Input]===
/* A function contains a sequence of statements */
/* Try decls and stmts and exprs together. */

simplefunc: function boolean ( x: integer, y: integer ) = {

     // A declaration
     z: integer = x * y;

     // An expression with a semicolon
     z = 16 + x / y;

     // Print statement
     print "input is: ", x, " and ", y, "\n";

     // Simple if-else statement
     if( x < y ) {
         return true;
     } else {
         return false;
     }

}

===[HIDDEN TESTS/good5.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good5.bminor Output]===
simplefunc: function boolean (x: integer, y: integer) =
{
   z: integer = x*y;
   z=16+x/y;
   print "input is: ",x," and ",y,"\n";
   if(x<y)
   {
      return true;
   }
   else
   {
      return false;
   }
}




===[HIDDEN TESTS/good6.bminor Input]===
/* Try several variations of for-loops */

simplefunc: function void (r: integer, s: integer, t: integer ) = {

    i: integer;

    for( i=0; i<r; i++ ) {
        print i,"\n";
    }

    i=0;
    for( ; i<s; i++ ) {
        print i,"\n";
    }

    i=0;
    for( ; i<r; ) {
        print i,"\n";
        i++;
    }

    for(;;) print "forever!\n";
}

===[HIDDEN TESTS/good6.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good6.bminor Output]===
simplefunc: function void (r: integer, s: integer, t: integer) =
{
   i: integer;
   for(i=0;i<r;i++)
   {
      print i,"\n";
   }
   i=0;
   for(;i<s;i++)
   {
      print i,"\n";
   }
   i=0;
   for(;i<r;)
   {
      print i,"\n";
      i++;
   }
   for(;;)
   {
      print "forever!\n";
   }
}




===[HIDDEN TESTS/good7.bminor Input]===
/* Test various nestings of if-else statements */

testit: function boolean ( x: integer, y: integer ) = {

	/* If statement without braces */
	if( x<y ) print "less\n"; else print "low\n";

	/* If statement with braces */
	if( x<y ) { print "less\n"; } else { print "low\n"; }

	/* This statement should print nothing */
        if(20<10) if(10<20) print "incorrect!"; else print "dangling else!";

	/* statements and decls inside of if-else */

        if( x>y ) {
              i: integer;
              for(i=0;i<x;i++) print i, "\n";
        } else {
              i: integer;
              for(i=0;i<y;i++) print i, "\n";
        }

	/* A decl can come after a few statements */
	i: integer;

	/* try the other way around */
	for(i=0;i<x;i++) {
              if( i<x ) print "small"; else print "large";
        }

        return true;
}

===[HIDDEN TESTS/good7.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good7.bminor Output]===
testit: function boolean (x: integer, y: integer) =
{
   if(x<y)
   {
      print "less\n";
   }
   else
   {
      print "low\n";
   }
   if(x<y)
   {
      print "less\n";
   }
   else
   {
      print "low\n";
   }
   if(20<10)
   {
      if(10<20)
      {
         print "incorrect!";
      }
      else
      {
         print "dangling else!";
      }
   }
   if(x>y)
   {
      i: integer;
      for(i=0;i<x;i++)
      {
         print i,"\n";
      }
   }
   else
   {
      i: integer;
      for(i=0;i<y;i++)
      {
         print i,"\n";
      }
   }
   i: integer;
   for(i=0;i<x;i++)
   {
      if(i<x)
      {
         print "small";
      }
      else
      {
         print "large";
      }
   }
   return true;
}




===[HIDDEN TESTS/good8.bminor Input]===
/* Now try some expressions */

x: integer = 65;
s: string = "hello";
b: boolean = false;

min: function integer ( a: integer, b: integer ) =
{
	if( a<b ) return a; else return b;
}

testfunc: function void ( z: integer ) =
{
	// Nested integer operators.
	y: integer = x*(x*10 + 55%6 + z/10);
	print "y: ", y, "\n";

	// Nested boolean operations.
	c: boolean = ( x<100 && y>200 ) || !(b=true);
	print "c: ", c, "\n";

	// Boolean operations on strings?
	d: boolean = (s == "goodbye");
	print "d: ", d, "\n";

	// Can we stack up assignments?
	z = y = x;

	a: array [100] integer;

	// Function calls and array accesses:
	y = min(a[10],a[20]);

	// float operations
	f: float = 3.4 + 5.6;
	g: float = 34.1e7 + 9.9e3;
}

===[HIDDEN TESTS/good8.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good8.bminor Output]===
x: integer = 65;
s: string = "hello";
b: boolean = false;
min: function integer (a: integer, b: integer) =
{
   if(a<b)
   {
      return a;
   }
   else
   {
      return b;
   }
}
testfunc: function void (z: integer) =
{
   y: integer = x*(x*10+55%6+z/10);
   print "y: ",y,"\n";
   c: boolean = (x<100&&y>200)||!(b=true);
   print "c: ",c,"\n";
   d: boolean = (s=="goodbye");
   print "d: ",d,"\n";
   z=y=x;
   a: array [100] integer;
   y=min(a[10],a[20]);
   f: float = 3.4+5.6;
   g: float = 3.41e+08+9900;
}




===[HIDDEN TESTS/good9.bminor Input]===
/* Check for minimum use of parentheses. */

testfunc: function void ( x: integer, y:integer, z:integer ) = {

          r: integer;
	  b: boolean;

          // Parens required
	  r = (x+y)/z;
	  r = x+(y+z);
	  b = (true||false) && (false||true);

          // Parens not required
	  r = x+(y/z);
	  r = (x+y)+z;
	  b = (x+y) < (x+z);
	  b = (true&&false) || (false&&true);

}

===[HIDDEN TESTS/good9.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good9.bminor Output]===
testfunc: function void (x: integer, y: integer, z: integer) =
{
   r: integer;
   b: boolean;
   r=(x+y)/z;
   r=x+(y+z);
   b=(true||false)&&(false||true);
   r=x+(y/z);
   r=(x+y)+z;
   b=(x+y)<(x+z);
   b=(true&&false)||(false&&true);
}




====Bad Tests====
===== SUMMARIZED PRINTER RESULTS =====
{
  "student_tests": {
    "Good": {
      "correct": 20,
      "incorrect": 0
    }
  },
  "hidden_tests": {
    "Good": {
      "correct": 10,
      "incorrect": 0
    }
  }
}

Printer Project
---------------

General Structure (20/20 points)
----------------------------------------------
Program stucture checks out and looks well formed

Construction of the abstract syntax tree and coverage of all language elements (25/30 points)
----------------------------------------------

Indentation of Blocks (10 points)
Nicely done! Indenting is consistent

Parentheses Display: (5/10 points)
Some unneeded parentheses

Spacing of Expressions: (10 points)
Expressions formatting appears to be correct

Student Tests (20/20 points)
------------------------------------------
Nice test coverage

Hidden Tests (20/20 points)
------------------------------------------
Good work passing all of the hidden tests

Coding Style (10/10 points)
------------------------------------------
Coding style looks quite nice. Well done!

---------------
