TOKEN_ID                  y
TOKEN_ASSIGNMENT          =
TOKEN_ID                  mx
TOKEN_PLUS                +
TOKEN_ID                  b
TOKEN_SEMICOLON           ;
TOKEN_RETURN              return
TOKEN_PAREN_OPEN          (
TOKEN_ID                  f
TOKEN_INTEGER_LITERAL     -32
TOKEN_PAREN_CLOSE         )
TOKEN_MULTI               *
TOKEN_INTEGER_LITERAL     5
TOKEN_DIVIDE              /
TOKEN_INTEGER_LITERAL     9
TOKEN_IF                  if
TOKEN_PAREN_OPEN          (
TOKEN_ID                  yup
TOKEN_PAREN_CLOSE         )
TOKEN_BRACE_OPEN          {
TOKEN_PRINT               print
TOKEN_STRING_LITERAL      he he ha
TOKEN_BRACE_CLOSE         }
TOKEN_ELSE                else
TOKEN_BRACE_OPEN          {
TOKEN_ID                  foo
TOKEN_PAREN_OPEN          (
TOKEN_STRING_LITERAL      he he ha
TOKEN_PAREN_CLOSE         )
TOKEN_BRACE_CLOSE         }
TOKEN_FOR                 for
TOKEN_PAREN_OPEN          (
TOKEN_INTEGER             integer
TOKEN_ID                  i
TOKEN_ASSIGNMENT          =
TOKEN_INTEGER_LITERAL     0
TOKEN_SEMICOLON           ;
TOKEN_ID                  i
TOKEN_LT                  <
TOKEN_INTEGER_LITERAL     100
TOKEN_SEMICOLON           ;
TOKEN_ID                  i
TOKEN_POST_INC            ++
TOKEN_PAREN_CLOSE         )
TOKEN_BRACE_OPEN          {
TOKEN_PRINT               print
TOKEN_STRING_LITERAL      nope
TOKEN_SEMICOLON           ;
TOKEN_BRACE_CLOSE         }
